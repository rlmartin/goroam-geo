// Add/remove values from a space-delimited list.
String.prototype.add_value = function(arrAdd, arrRemove, bolAddCaseSensitive, bolRemoveCaseSensitive) {
	return goroam.string.add_value(this, arrAdd, arrRemove, bolAddCaseSensitive, bolRemoveCaseSensitive);
}
// Replace any whitespace with a single space.
String.prototype.compress_whitespace = function() {
	var regReplace = /\s+/g;
	return this.replace(regReplace, ' ');
};
String.prototype.in_str = function(str) {
	return goroam.string.in_str(this, str);
};
String.prototype.left = function(x) {
	return goroam.string.left(this, x);
};
String.prototype.left_of = function(str) {
	return goroam.string.left_of_str(this, str);
};
String.prototype.left_of_rev = function(str) {
	return goroam.string.left_of_str_rev(this, str);
};
String.prototype.ltrim = function() {
	return goroam.string.ltrim(this);
};
String.prototype.md5 = function() {
  return goroam.string.md5(this);
};
String.prototype.reg_exp_escape = function(str) {
  return goroam.string.reg_exp_escape(this);
}
String.prototype.right = function(x) {
	return goroam.string.right(this, x);
};
String.prototype.right_of = function(str) {
	return goroam.string.right_of_str(this, str);
};
String.prototype.right_of_rev = function(str) {
	return goroam.string.right_of_str_rev(this, str);
};
String.prototype.rtrim = function() {
	return goroam.string.rtrim(this);
};
String.prototype.split_trim = function() {
	return goroam.string.split_trim(this);
};
String.prototype.to_hashtable = function(strMemberDelimiter, strPairDelimiter) {
	return goroam.string.to_hashtable(this, strMemberDelimiter, strPairDelimiter);
};
String.prototype.trim = function() {
	return goroam.string.trim(this);
};


// Adds a prefix to all words in the string.
goroam.string.add_prefix_to_all_words = function(str, strPrefix) {
  return str.replace(/(^|\s)\b/g, '$1' + strPrefix);
}



// Add/remove values from a space-delimited list.
goroam.string.add_value = function(str, arrAdd, arrRemove, bolAddCaseSensitive, bolRemoveCaseSensitive) {
	var i;
	bolAddCaseSensitive = goroam.system.set_default(bolAddCaseSensitive, true);
	bolRemoveCaseSensitive = goroam.system.set_default(bolRemoveCaseSensitive, true);
	// Prep the arrays.
	if (!arrAdd) {
		arrAdd = [];
	} else if (!goroam.system.is_array(arrAdd)) {
		arrAdd = arrAdd.compress_whitespace().split(' ');
	}
	if (!arrRemove) {
		arrRemove = [];
	} else if (!goroam.system.is_array(arrRemove)) {
		arrRemove = arrRemove.compress_whitespace().split(' ');
	}
	// This allows the currently-set value to override, i.e. if a value it set to
	// be both added and removed, nothing will happen and the value will remain
	// in the string if already there and will not be added if already absent.
	arrAdd.remove_intersection(arrRemove);
	// Process the arrays.
	for (i = 0; i < arrAdd.length; i++) {
		if (arrAdd[i] != '') {
			if (!goroam.string.in_str(str, '\\b' + arrAdd[i] + '\\b', bolAddCaseSensitive, true)) str += ' ' + arrAdd[i];
		}
	}
	if (!goroam.system.is_array(arrRemove)) arrRemove = [arrRemove];
	for (i = 0; i < arrRemove.length; i++) {
		if (arrRemove[i] != '') str = goroam.string.replace(str, '\\b' + arrRemove[i] + '\\b', '', bolRemoveCaseSensitive, true);
	}
	return str.compress_whitespace();
}



// Escapes special characters in a string to be used in a regular expression.
goroam.string.reg_exp_escape = function(str) {
	// The list of reserved characters in RegExp.
	var arrSpecials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '^', '$'];
	// Find the special characters and remember the match.
	var reSpecials = new RegExp('(\\' + arrSpecials.join('|\\') + ')', 'g');
	// Replace the special characters (based on the match) and add a slash before it.
	return str.replace(reSpecials, '\\$1');
}



// See if a string is included in another string.
goroam.string.in_str = function(str1, str2, bolCaseSensitive, bolNoRegExpEscape) {
	var strTemp2 = str2;
	var strFlags = '';
	if (!bolCaseSensitive) strFlags += 'i';
	if (!bolNoRegExpEscape) strTemp2 = strTemp2.reg_exp_escape();
	var reFind = RegExp(strTemp2, strFlags);
	return (str1.search(reFind) >= 0);
}



// Takes the leftmost x characters of a string.
goroam.string.left = function(str, x) {
	return str.substr(0, x);
}



// Takes everything left of a given string.  If the string is not found, it returns the whole string.
goroam.string.left_of_str = function(str, strFind) {
	var i = str.indexOf(strFind);
	if (i < 0) {
		return str;
	} else {
		return str.left(i);
	}
}



// Takes everything left of a given string, starting from the end.  If the string is not found, it returns the whole string.
goroam.string.left_of_str_rev = function(str, strFind) {
	var i = str.lastIndexOf(strFind);
	if (i < 0) {
		return str;
	} else {
		return str.left(i);
	}
}



// Removes leading whitespaces
goroam.string.ltrim = function(str) {
	var re = /\s*((\S+\s*)*)/;
	return str.replace(re, '$1');
}



// This function is similar to string.replace(), except that it automates the RegExp
// and automatically replaces all instances of the found string.  strFind can be
// RegExp string.
goroam.string.replace = function(str, strFind, strReplace, bolCaseSensitive, bolIsRegExp) {
	// Default to case sensitive.
	bolCaseSensitive = goroam.system.set_default(bolCaseSensitive, true);
	// Get the RegExp flags.
	// Match all occurrences.
	var strFlags = 'g';
	// Case in-sensitive.
	if (!bolCaseSensitive) strFlags += 'i';
  var strTemp = strFind;
  if (!bolIsRegExp) strTemp = strTemp.reg_exp_escape();
	var reFind = RegExp(strTemp, strFlags);
	return str.replace(reFind, strReplace);
}



// Takes the righttmost x characters of a string.
goroam.string.right = function(str, x) {
	i = str.length - x;
	if (i < 0) {
		return str;
	} else {
		return str.substr(i);
	}
}



// Takes everything right of a given string.  If the string is not found, it returns the whole string.
goroam.string.right_of_str = function(str, strFind) {
	var i = str.indexOf(strFind);
	if (i < 0) {
		return str;
	} else {
		return str.right(str.length - strFind.length - i);
	}
}



// Takes everything right of a given string, starting from the end.  If the string is not found, it returns the whole string.
goroam.string.right_of_str_rev = function(str, strFind) {
	var i = str.lastIndexOf(strFind);
	if (i < 0) {
		return str;
	} else {
		return str.right(str.length - strFind.length - i);
	}
}



// Removes ending whitespaces
goroam.string.rtrim = function(str) {
	var re = /((\s*\S+)*)\s*/;
	return str.replace(re, '$1');
}



goroam.string.split_trim = function(str, strDelim) {
	var re = RegExp('\\s*' + strDelim + '\\s*', 'g');
	var strTemp = goroam.string.trim(str.replace(re, strDelim));
	return strTemp.split(strDelim);
}



// Translates the given string into a hashtable (an object with properties).  It takes optional values for the
// MemberDelimiter (defaults to '&') and PairDelimiter (defaults to '=').  Defaults essentially translate a string
// to a querystring object.  If a value appears more than once in the string, only the last given value will be
// included in the hashtable.
goroam.string.to_hashtable = function(str, strMemberDelimiter, strPairDelimiter) {
  var objResult = {};
  strMemberDelimiter = (strMemberDelimiter || '&');
  strPairDelimiter = (strPairDelimiter || '=');
  var arrMembers = str.split(strMemberDelimiter);
  for (var i = 0; i < arrMembers.length; i++) {
    var strPair = arrMembers[i].trim();
    if (strPair != '') {
      // Figure out the name/value pair.
      var strName = strPair;
      var strValue = '';
      if (strPair.in_str(strPairDelimiter)) {
        strName = strPair.left_of(strPairDelimiter).trim();
        strValue = strPair.right_of(strPairDelimiter);
      }
      objResult[strName] = strValue;
    }
  }
	return objResult;
}



// Removes leading and ending whitespaces
goroam.string.trim = function(str) {
	return goroam.string.ltrim(goroam.string.rtrim(str));
}



/* MD5 Message-Digest Algorithm - JavaScript
' MODIFICATION HISTORY:
' 1.0    16-Feb-2001 - Phil Fresle (sales@frez.co.uk) - Initial Version (VB/ASP code)
' 1.0    21-Feb-2001 - Enrico Mosanghini (erik504@yahoo.com) - JavaScript porting
*/
goroam.string.md5 = function(sMessage) {
 function RotateLeft(lValue, iShiftBits) { return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits)); }
 function AddUnsigned(lX,lY) {
	var lX4,lY4,lX8,lY8,lResult;
	lX8 = (lX & 0x80000000);
	lY8 = (lY & 0x80000000);
	lX4 = (lX & 0x40000000);
	lY4 = (lY & 0x40000000);
	lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);
	if (lX4 & lY4) return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
	if (lX4 | lY4) {
		if (lResult & 0x40000000) return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
		else return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
	} else return (lResult ^ lX8 ^ lY8);
 }
 function F(x,y,z) { return (x & y) | ((~x) & z); }
 function G(x,y,z) { return (x & z) | (y & (~z)); }
 function H(x,y,z) { return (x ^ y ^ z); }
 function I(x,y,z) { return (y ^ (x | (~z))); }
 function FF(a,b,c,d,x,s,ac) {
	a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
	return AddUnsigned(RotateLeft(a, s), b);
 }
 function GG(a,b,c,d,x,s,ac) {
	a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
	return AddUnsigned(RotateLeft(a, s), b);
 }
 function HH(a,b,c,d,x,s,ac) {
	a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
	return AddUnsigned(RotateLeft(a, s), b);
 }
 function II(a,b,c,d,x,s,ac) {
	a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
	return AddUnsigned(RotateLeft(a, s), b);
 }
 function ConvertToWordArray(sMessage) {
	var lWordCount;
	var lMessageLength = sMessage.length;
	var lNumberOfWords_temp1=lMessageLength + 8;
	var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
	var lNumberOfWords = (lNumberOfWords_temp2+1)*16;
	var lWordArray=Array(lNumberOfWords-1);
	var lBytePosition = 0;
	var lByteCount = 0;
	while ( lByteCount < lMessageLength ) {
		lWordCount = (lByteCount-(lByteCount % 4))/4;
		lBytePosition = (lByteCount % 4)*8;
		lWordArray[lWordCount] = (lWordArray[lWordCount] | (sMessage.charCodeAt(lByteCount)<<lBytePosition));
		lByteCount++;
	}
	lWordCount = (lByteCount-(lByteCount % 4))/4;
	lBytePosition = (lByteCount % 4)*8;
	lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
	lWordArray[lNumberOfWords-2] = lMessageLength<<3;
	lWordArray[lNumberOfWords-1] = lMessageLength>>>29;
	return lWordArray;
 }
 function WordToHex(lValue) {
	var WordToHexValue="",WordToHexValue_temp="",lByte,lCount;
	for (lCount = 0;lCount<=3;lCount++) {
		lByte = (lValue>>>(lCount*8)) & 255;
		WordToHexValue_temp = "0" + lByte.toString(16);
		WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);
	}
	return WordToHexValue;
 }
	var x=Array();
	var k,AA,BB,CC,DD,a,b,c,d
	var S11=7, S12=12, S13=17, S14=22;
	var S21=5, S22=9 , S23=14, S24=20;
	var S31=4, S32=11, S33=16, S34=23;
	var S41=6, S42=10, S43=15, S44=21;
	// Steps 1 and 2.  Append padding bits and length and convert to words
	x = ConvertToWordArray(sMessage);
	// Step 3.  Initialise
	a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;
	// Step 4.  Process the message in 16-word blocks
	for (k=0;k<x.length;k+=16) {
		AA=a; BB=b; CC=c; DD=d;
		a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);
		d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);
		c=FF(c,d,a,b,x[k+2], S13,0x242070DB);
		b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);
		a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);
		d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);
		c=FF(c,d,a,b,x[k+6], S13,0xA8304613);
		b=FF(b,c,d,a,x[k+7], S14,0xFD469501);
		a=FF(a,b,c,d,x[k+8], S11,0x698098D8);
		d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);
		c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);
		b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);
		a=FF(a,b,c,d,x[k+12],S11,0x6B901122);
		d=FF(d,a,b,c,x[k+13],S12,0xFD987193);
		c=FF(c,d,a,b,x[k+14],S13,0xA679438E);
		b=FF(b,c,d,a,x[k+15],S14,0x49B40821);
		a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);
		d=GG(d,a,b,c,x[k+6], S22,0xC040B340);
		c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);
		b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);
		a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);
		d=GG(d,a,b,c,x[k+10],S22,0x2441453);
		c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);
		b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);
		a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);
		d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);
		c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);
		b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);
		a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);
		d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);
		c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);
		b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);
		a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);
		d=HH(d,a,b,c,x[k+8], S32,0x8771F681);
		c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);
		b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);
		a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);
		d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);
		c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);
		b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);
		a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);
		d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);
		c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);
		b=HH(b,c,d,a,x[k+6], S34,0x4881D05);
		a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);
		d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);
		c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);
		b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);
		a=II(a,b,c,d,x[k+0], S41,0xF4292244);
		d=II(d,a,b,c,x[k+7], S42,0x432AFF97);
		c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);
		b=II(b,c,d,a,x[k+5], S44,0xFC93A039);
		a=II(a,b,c,d,x[k+12],S41,0x655B59C3);
		d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);
		c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);
		b=II(b,c,d,a,x[k+1], S44,0x85845DD1);
		a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);
		d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);
		c=II(c,d,a,b,x[k+6], S43,0xA3014314);
		b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);
		a=II(a,b,c,d,x[k+4], S41,0xF7537E82);
		d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);
		c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);
		b=II(b,c,d,a,x[k+9], S44,0xEB86D391);
		a=AddUnsigned(a,AA); b=AddUnsigned(b,BB); c=AddUnsigned(c,CC); d=AddUnsigned(d,DD);
	}
	// Step 5.  Output the 128 bit digest
	var temp= WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);
	return temp.toLowerCase();
}
